syntax = "proto3";

enum Type {
  TRANSFER = 0;
  STAKE = 1;
  RELEASE = 2;
}

enum Chain {
  ETHEREUM = 0;
  MONERO = 1;
  BITCOIN = 2;
}

message Transfer {
  required Type type = 0;
  optional Chain chain = 1; // Only used for TRANSFER/RELEASE types
  required bytes from = 2;
  required bytes to = 3; // Only used for TRANSFER types
  required bytes data = 4;
  required uint64 amount = 5;
  required bytes signature = 6;
  required uint64 nonce = 7;
}

message Stake {
  required Type type = 0;
  required bytes from = 1;
  required bytes data = 2;
  required uint64 amount = 3;
  required bytes signature = 4;
  required uint64 nonce = 5;
  required bytes asset = 6;
}

message Release {
  optional Chain chain = 0; // Only used for RELEASE/TRANSFER types 
  required Type type = 1;
  required bytes from = 2;
  required bytes data = 3;
  required uint64 amount = 4;
  required bytes signature = 5;
  required uint64 nonce = 6;
  required bytes asset = 7;
  required bytes destination = 8;
}

message Transaction {
  required Type type = 0;
  optional Chain chain = 1; // Only used for RELEASE/TRANSFER types 
  optional bytes to = 2; // Only used for TRANSFER types
  required bytes from = 3;
  required bytes data = 4;
  required uint64 amount = 5;
  required bytes signature = 6;
  required uint64 nonce = 7;
  required bytes asset = 8;
  required bytes destination = 9;
}

message Account {
  string address = 1;
  repeated TokenBalance stakedBalance = 4;
  repeated TokenBalance unStakedBalance = 5;
  uint64 nonce = 6;
}

message TokenBalance {
  string tokenAddress = 1;
  double balance = 2;
}

message Balance {
  required bytes hash = 0;
  required uint64 balance = 1;
}

message TransactionReply {
  enum STATUS {
    SUCCESS = 0;
    ERROR = 1;
  }

  required STATUS status = 0;
  optional bytes errorMsg = 1;

}

message MessageRequest {
  enum ChannelType {
    MEMPOOL = 0;
    CONSENSUS = 1;
  }

  enum MessageType {
    REQUEST_SKETCH = 0;
    REQUEST_MEMPOOL = 1;
    RESPONSE_SKETCH = 3;
    RESPONSE_MEMPOOL = 4;
  }

  required MessageType type = 0;
  required ChannelType channel = 1; 
  oneof data {
    string value = 2;
    bytes bytes_data = 3;
  };
}
/*
   used for encoding and decoding the Mempool for broadcasting over pubsub to other peers
*/
message Mempool {
  map<string, Transaction> data = 0;
}

/*

Transactions submitted REBASE block and signed during BASE block:

1. Sign over to new mint authority message
2. Sign Monero UTXOs over to new gateway

*/

message BlockHeader {
  enum BlockType {
    STANDARD = 0;
    BASE = 1; // Define the signatories responsible for proposing, prevoting, and precommitting blocks up to and including the next base block.
    REBASE = 2;
  }
  required BlockType type = 0;
  required bytes parentHash = 1; // BASE must reference REBASE. REBASE must reference STANDARD. 
  required bytes baseHash = 2; // Hash of the most recently committed BASE block. In event of BASE block, should reference previous block.
  optional bytes txRoot = 3; // Transactions are only allowed in REBASE and STANDARD types.
  optional bytes planRoot = 4; // Optional for STANDARD and REBASE. Stores application specific data (needed by sMPC)
  required bytes prevStateRoot = 5;
  required uint64 height = 6;
  required uint64 round = 7;
  required uint64 timestamp = 8;
  optional bytes signatories = 9; // Can only be defined in BASE and REBASE types. BASE signatories must be same as parent (REBASE).
  required uint64 fee = 10; // Network block fee
}

message BalanceQuery {
  required bytes address = 0;
}

message BalanceReply {
  enum STATUS {
    SUCCESS = 0;
    ERROR = 1;
  }

  required STATUS status = 0;
  optional uint64 balance = 1;
  optional bytes address = 2;
  optional bytes errorMsg = 3;

}

service RpcService{
  rpc zero_getBalance( BalanceQuery ) returns (BalanceReply) {};
  rpc zero_sendTransaction( Transaction ) returns (TransactionReply) {};
  rpc zero_transferTransaction( Transfer ) returns (TransactionReply) {};
  rpc zero_stakeTransaction( Stake ) returns (TransactionReply) {}
  rpc zero_releaseTransaction( Release ) returns (TransactionReply) {}
}
