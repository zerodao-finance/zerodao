/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface Secp256k1Interface extends utils.Interface {
  functions: {
    "AA()": FunctionFragment;
    "BB()": FunctionFragment;
    "GX()": FunctionFragment;
    "GY()": FunctionFragment;
    "NN()": FunctionFragment;
    "PP()": FunctionFragment;
    "derivePubKey(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AA"
      | "BB"
      | "GX"
      | "GY"
      | "NN"
      | "PP"
      | "derivePubKey"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AA", values?: undefined): string;
  encodeFunctionData(functionFragment: "BB", values?: undefined): string;
  encodeFunctionData(functionFragment: "GX", values?: undefined): string;
  encodeFunctionData(functionFragment: "GY", values?: undefined): string;
  encodeFunctionData(functionFragment: "NN", values?: undefined): string;
  encodeFunctionData(functionFragment: "PP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "derivePubKey",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "AA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "derivePubKey",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Secp256k1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Secp256k1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AA(overrides?: CallOverrides): Promise<[BigNumber]>;

    BB(overrides?: CallOverrides): Promise<[BigNumber]>;

    GX(overrides?: CallOverrides): Promise<[BigNumber]>;

    GY(overrides?: CallOverrides): Promise<[BigNumber]>;

    NN(overrides?: CallOverrides): Promise<[BigNumber]>;

    PP(overrides?: CallOverrides): Promise<[BigNumber]>;

    derivePubKey(
      privKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  AA(overrides?: CallOverrides): Promise<BigNumber>;

  BB(overrides?: CallOverrides): Promise<BigNumber>;

  GX(overrides?: CallOverrides): Promise<BigNumber>;

  GY(overrides?: CallOverrides): Promise<BigNumber>;

  NN(overrides?: CallOverrides): Promise<BigNumber>;

  PP(overrides?: CallOverrides): Promise<BigNumber>;

  derivePubKey(
    privKey: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  callStatic: {
    AA(overrides?: CallOverrides): Promise<BigNumber>;

    BB(overrides?: CallOverrides): Promise<BigNumber>;

    GX(overrides?: CallOverrides): Promise<BigNumber>;

    GY(overrides?: CallOverrides): Promise<BigNumber>;

    NN(overrides?: CallOverrides): Promise<BigNumber>;

    PP(overrides?: CallOverrides): Promise<BigNumber>;

    derivePubKey(
      privKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {};

  estimateGas: {
    AA(overrides?: CallOverrides): Promise<BigNumber>;

    BB(overrides?: CallOverrides): Promise<BigNumber>;

    GX(overrides?: CallOverrides): Promise<BigNumber>;

    GY(overrides?: CallOverrides): Promise<BigNumber>;

    NN(overrides?: CallOverrides): Promise<BigNumber>;

    PP(overrides?: CallOverrides): Promise<BigNumber>;

    derivePubKey(
      privKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    derivePubKey(
      privKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
