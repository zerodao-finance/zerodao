/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Bip340Ecrec,
  Bip340EcrecInterface,
} from "../../../bip340-solidity/contracts/Bip340Ecrec";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "px",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rx",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "s",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "m",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061070f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630fde6e5514610030575b600080fd5b61004361003e36600461059e565b610057565b604051901515815260200160405180910390f35b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f851015806100a857507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8410155b806100d357507ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418310155b156100e05750600061024b565b6000806100ec86610253565b91509150806101005760009250505061024b565b600061010d8789876102ae565b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414189880961015f907ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414161062e565b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418a84096101b1907ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414161062e565b60408051600080825260208201808452869052601b92820192909252606081018d9052608081018390529192509060019060a0016020604051602081039080840390855afa158015610207573d6000803e3d6000fd5b5050506020604051035190508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161496505050505050505b949350505050565b600080600080610262856103ae565b9150915080610278575060009485945092505050565b50604080516020808201969096528082019290925280518083038201815260609092019052805193019290922092600192509050565b604080517f7bb52d7a9fef58323eb1bf7a407db382d2f3f2d81bb1224f49fe518f6d48d37c60208201819052918101829052606081018590526080810184905260a08101839052600091907ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641419060029060c001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905261035991610645565b602060405180830381855afa158015610376573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906103999190610680565b6103a39190610699565b9150505b9392505050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8160078286106103ea57506000958695509350505050565b600083806103fa576103fa6105d0565b8480610408576104086105d0565b838680610417576104176105d0565b868b09088580610429576104296105d0565b8680610437576104376105d0565b8a8b098a090890506104608160046104508760016106ad565b61045a91906106c5565b8661048d565b90506000600182161561047c57610477828661062e565b61047e565b815b98600198509650505050505050565b6000816000036104fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4d6f64756c7573206973207a65726f0000000000000000000000000000000000604482015260640160405180910390fd5b8360000361050d575060006103a7565b8260000361051d575060016103a7565b60017f80000000000000000000000000000000000000000000000000000000000000005b801561059557838186161515870a85848509099150836002820486161515870a85848509099150836004820486161515870a85848509099150836008820486161515870a8584850909915060109004610541565b50949350505050565b600080600080608085870312156105b457600080fd5b5050823594602084013594506040840135936060013592509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610640576106406105ff565b500390565b6000825160005b81811015610666576020818601810151858301520161064c565b81811115610675576000828501525b509190910192915050565b60006020828403121561069257600080fd5b5051919050565b6000826106a8576106a86105d0565b500690565b600082198211156106c0576106c06105ff565b500190565b6000826106d4576106d46105d0565b50049056fea264697066735822122027e88850dbcd3900520d187061a01a5a2f98195c0b575962f98ea73db5f8013c64736f6c634300080f0033";

type Bip340EcrecConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Bip340EcrecConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bip340Ecrec__factory extends ContractFactory {
  constructor(...args: Bip340EcrecConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Bip340Ecrec> {
    return super.deploy(overrides || {}) as Promise<Bip340Ecrec>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Bip340Ecrec {
    return super.attach(address) as Bip340Ecrec;
  }
  override connect(signer: Signer): Bip340Ecrec__factory {
    return super.connect(signer) as Bip340Ecrec__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Bip340EcrecInterface {
    return new utils.Interface(_abi) as Bip340EcrecInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Bip340Ecrec {
    return new Contract(address, _abi, signerOrProvider) as Bip340Ecrec;
  }
}
